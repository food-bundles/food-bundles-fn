okay now let use fetch all products here in this table  so stock status will depends on quantity we have "in stock, low stock,  out of stock"
and expired dates make blanck space if not exist on product 

/* eslint-disable @typescript-eslint/no-explicit-any */
"use client";

import { useState, useMemo, useEffect } from "react";
import { DataTable } from "@/components/data-table";
import {
  inventoryColumns,
  type InventoryItem,
} from "./_components/inventory-columns";
import {
  createCommonFilters,
  TableFilters,
} from "../../../../components/filters";
import {
  AddProductModal,
  type ProductFormData,
} from "./_components/add-product-modal";
import { productService } from "@/app/services/productService";

const sampleInventoryData: InventoryItem[] = [
  {
    id: "1",
    name: "Essential Grocery Box",
    image: "/filled-grocery-box.png",
    category: "VEGETABLES",
    quantity: 500,
    price: 13000, // Updated to RWF pricing
    expiryDate: "2024-02-28",
    status: "In Stock",
  },
  {
    id: "2",
    name: "Fresh Tomatoes",
    image: "/filled-grocery-box.png",
    category: "VEGETABLES",
    quantity: 200,
    price: 2500,
    expiryDate: "2024-02-15",
    status: "In Stock",
  },
  {
    id: "3",
    name: "Organic Bananas",
    image: "/filled-grocery-box.png",
    category: "FRUITS",
    quantity: 150,
    price: 1800,
    expiryDate: "2024-02-20",
    status: "Low Stock",
  },
  {
    id: "4",
    name: "Rice Bags",
    image: "/filled-grocery-box.png",
    category: "GRAINS",
    quantity: 0,
    price: 8500,
    expiryDate: "2024-06-30",
    status: "Out of Stock",
  },
  {
    id: "5",
    name: "Sweet Potatoes",
    image: "/filled-grocery-box.png",
    category: "TUBERS",
    quantity: 75,
    price: 3200,
    expiryDate: "2024-03-10",
    status: "Low Stock",
  },
];

const statusOptions = [
  { label: "All Status", value: "all" },
  { label: "In Stock", value: "In Stock" },
  { label: "Low Stock", value: "Low Stock" },
  { label: "Out of Stock", value: "Out of Stock" },
];

export default function InventoryPage() {
  const [searchValue, setSearchValue] = useState("");
  const [statusValue, setStatusValue] = useState("all");
  const [dateValue, setDateValue] = useState<Date | undefined>(undefined);
  const [isAddModalOpen, setIsAddModalOpen] = useState(false);
  const [products, setProducts] =
    useState<InventoryItem[]>(sampleInventoryData);
  const [isLoading, setIsLoading] = useState(false);

  useEffect(() => {
    const fetchProducts = async () => {
      try {
        setIsLoading(true);
        const response = await productService.getAllProducts();
        if (response.success && response.data) {
          const transformedProducts: InventoryItem[] = response.data.map(
            (product: any) => ({
              id: product.id,
              name: product.productName,
              image: product.images?.[0] || "/filled-grocery-box.png",
              category: product.category,
              quantity: product.quantity,
              price: product.unitPrice,
              expiryDate: product.expiryDate
                ? new Date(product.expiryDate).toISOString().split("T")[0]
                : "",
              status:
                product.quantity > 50
                  ? "In Stock"
                  : product.quantity > 0
                  ? "Low Stock"
                  : "Out of Stock",
            })
          );
          setProducts(transformedProducts);
        }
      } catch (error) {
        console.error("Failed to fetch products:", error);
      } finally {
        setIsLoading(false);
      }
    };

    fetchProducts();
  }, []);

  const filteredData = useMemo(() => {
    return products.filter((item) => {
      const matchesSearch =
        item.name.toLowerCase().includes(searchValue.toLowerCase()) ||
        item.category.toLowerCase().includes(searchValue.toLowerCase());
      const matchesStatus =
        statusValue === "all" || item.status === statusValue;

      return matchesSearch && matchesStatus;
    });
  }, [searchValue, statusValue, products]);

  const filters = [
    createCommonFilters.search(
      searchValue,
      setSearchValue,
      "Search products..."
    ),
    createCommonFilters.status(statusValue, setStatusValue, statusOptions),
    createCommonFilters.date(dateValue, setDateValue, "Date Range"),
  ];

  const handleAddProduct = () => {
    setIsAddModalOpen(true);
  };

  const handleProductSubmit = async (productData: ProductFormData) => {
    try {
      const response = await productService.createProduct(productData);
      if (response.success) {
        const updatedResponse = await productService.getAllProducts();
        if (updatedResponse.success && updatedResponse.data) {
          const transformedProducts: InventoryItem[] = updatedResponse.data.map(
            (product: any) => ({
              id: product.id,
              name: product.productName,
              image: product.images?.[0] || "/filled-grocery-box.png",
              category: product.category,
              quantity: product.quantity,
              price: product.unitPrice,
              expiryDate: product.expiryDate
                ? new Date(product.expiryDate).toISOString().split("T")[0]
                : "",
              status:
                product.quantity > 50
                  ? "In Stock"
                  : product.quantity > 0
                  ? "Low Stock"
                  : "Out of Stock",
            })
          );
          setProducts(transformedProducts);
        }
      }
    } catch (error) {
      console.error("Failed to add product:", error);
    }
  };

  const handleExport = () => {
    console.log("Export clicked");
  };

  return (
    <div className="p-6">
      <DataTable
        columns={inventoryColumns}
        data={filteredData}
        title="Inventory Management"
        showExport={true}
        onExport={handleExport}
        showAddButton={true}
        addButtonLabel="Add Product"
        onAddButton={handleAddProduct}
        customFilters={<TableFilters filters={filters} />}
        showSearch={false}
        showColumnVisibility={true}
        showPagination={true}
        showRowSelection={true}
        // loading={isLoading}
      />

      <AddProductModal
        open={isAddModalOpen}
        onOpenChange={setIsAddModalOpen}
        onSubmit={handleProductSubmit}
      />
    </div>
  );
}



"use client";

import type { ColumnDef } from "@tanstack/react-table";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Eye, Edit, Trash2, ArrowUpDown } from "lucide-react";
import Image from "next/image";

export type InventoryItem = {
  id: string;
  name: string;
  image: string;
  category: string;
  quantity: number;
  price: number;
  expiryDate: string;
  status: "In Stock" | "Low Stock" | "Out of Stock";
};

export const inventoryColumns: ColumnDef<InventoryItem>[] = [
  {
    accessorKey: "name",
    header: ({ column }) => {
      return (
        <Button
          variant="ghost"
          onClick={() => column.toggleSorting(column.getIsSorted() === "asc")}
          className="h-auto p-0 font-medium"
        >
          Product Name
          <ArrowUpDown className="ml-2 h-4 w-4" />
        </Button>
      );
    },
    cell: ({ row }) => {
      const item = row.original;
      return (
        <div className="flex items-center gap-3">
          <div className="relative h-10 w-10 rounded-md overflow-hidden">
            <Image
              src={item.image || "/placeholder.svg"}
              alt={item.name}
              fill
              className="object-cover"
            />
          </div>
          <span className="font-medium">{item.name}</span>
        </div>
      );
    },
  },
  {
    accessorKey: "category",
    header: ({ column }) => {
      return (
        <Button
          variant="ghost"
          onClick={() => column.toggleSorting(column.getIsSorted() === "asc")}
          className="h-auto p-0 font-medium"
        >
          Category
          <ArrowUpDown className="ml-2 h-4 w-4" />
        </Button>
      );
    },
    cell: ({ row }) => {
      return <span className="capitalize">{row.getValue("category")}</span>;
    },
  },
  {
    accessorKey: "quantity",
    header: ({ column }) => {
      return (
        <Button
          variant="ghost"
          onClick={() => column.toggleSorting(column.getIsSorted() === "asc")}
          className="h-auto p-0 font-medium"
        >
          Quantity
          <ArrowUpDown className="ml-2 h-4 w-4" />
        </Button>
      );
    },
    cell: ({ row }) => {
      return <span>{row.getValue("quantity")}</span>;
    },
  },
  {
    accessorKey: "price",
    header: ({ column }) => {
      return (
        <Button
          variant="ghost"
          onClick={() => column.toggleSorting(column.getIsSorted() === "asc")}
          className="h-auto p-0 font-medium"
        >
          Price
          <ArrowUpDown className="ml-2 h-4 w-4" />
        </Button>
      );
    },
    cell: ({ row }) => {
      const price = Number.parseFloat(row.getValue("price"));
      const formatted = new Intl.NumberFormat("en-US", {
        style: "currency",
        currency: "USD",
      }).format(price);
      return <span>{formatted}</span>;
    },
  },
  {
    accessorKey: "expiryDate",
    header: ({ column }) => {
      return (
        <Button
          variant="ghost"
          onClick={() => column.toggleSorting(column.getIsSorted() === "asc")}
          className="h-auto p-0 font-medium"
        >
          Expiry Date
          <ArrowUpDown className="ml-2 h-4 w-4" />
        </Button>
      );
    },
    cell: ({ row }) => {
      return <span>{row.getValue("expiryDate")}</span>;
    },
  },
  {
    accessorKey: "status",
    header: "Status",
    cell: ({ row }) => {
      const status = row.getValue("status") as string;
      return (
        <Badge
          variant={
            status === "In Stock"
              ? "default"
              : status === "Low Stock"
              ? "secondary"
              : "destructive"
          }
          className={
            status === "In Stock"
              ? "bg-green-100 text-green-800 hover:bg-green-100"
              : status === "Low Stock"
              ? "bg-yellow-100 text-yellow-800 hover:bg-yellow-100"
              : "bg-red-100 text-red-800 hover:bg-red-100"
          }
        >
          {status}
        </Badge>
      );
    },
  },
  {
    id: "actions",
    header: "Actions",
    cell: () => {
      return (
        <div className="flex items-center gap-2">
          <Button variant="ghost" size="sm" className="h-8 w-8 p-0">
            <Eye className="h-4 w-4" />
          </Button>
          <Button variant="ghost" size="sm" className="h-8 w-8 p-0">
            <Edit className="h-4 w-4" />
          </Button>
          <Button
            variant="ghost"
            size="sm"
            className="h-8 w-8 p-0 text-red-600 hover:text-red-700"
          >
            <Trash2 className="h-4 w-4" />
          </Button>
        </div>
      );
    },
  },
];


remember my database we have this fields:
"

  id                String             @id @default(uuid())

  unitPrice         Float

  unit              String

  createdAt         DateTime           @default(now())

  bonus             Int

  createdBy         String

  expiryDate        DateTime?

  images            String[]

  quantity          Float

  sku               String             @unique

  updatedAt         DateTime           @updatedAt

  category          ProductCategory

  productName       String             @unique

  status            ProductStatus      @default(ACTIVE)

  province          String?

  district          String?

  sector            String?

  cell              String?

  village           String?

  farmerSubmissions FarmerSubmission[]

  orderItems        OrderItem[]

  admin             Admin              @relation(fields: [createdBy], references: [id])

  CartItem          CartItem[]

"

so you can use it in maping and in colums add status of ACTIVE or

  INACTIVE

